<?xml version="1.0"?>
<rss version="2.0"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:dcterms="http://purl.org/dc/terms/" >
<channel>
<title>pages tagged Mining</title>
<link>http://zander.github.io//tags/Mining/</link>

<description>Toms place</description>
<generator>ikiwiki</generator>
<pubDate>Mon, 04 Jul 2016 10:06:57 +0000</pubDate>
<item>
	<title>Innovation - OnlineScaling</title>

	<guid isPermaLink="false">http://zander.github.io//posts/Innovation%20-%20OnlineScaling/</guid>

	<link>http://zander.github.io//posts/Innovation%20-%20OnlineScaling/</link>



	<category>Bitcoin</category>

	<category>Community</category>

	<category>Mining</category>


	<pubDate>Mon, 04 Jul 2016 10:06:57 +0000</pubDate>
	<dcterms:modified>2016-07-04T10:06:57Z</dcterms:modified>


	<description>&lt;p&gt;Last weekend we had the On-chain scaling conference which was a big success
with lots of excellent speakers and a large amount of visitors asking
questions and showing interest.&lt;/p&gt;

&lt;p&gt;I understand that a lot of people didn&#39;t manage to see them live for
various reasons. Not the least of them being time-zone differences.&lt;/p&gt;

&lt;p&gt;When my talk went onto YouTube I decided to put up a transcript here.
The actual talk can be found on &lt;a href=&quot;https://youtu.be/TCj84RKdjTs&quot;&gt;youtube&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Transcript&lt;/h2&gt;

&lt;p&gt;About 10 years ago I worked at Trolltech, a small Norwegian company making
tools for developers to build beautiful applications. I worked there for
some years when we got acquired by Nokia.
Nokia wanted our development libraries to work fast and smooth on their
phones as well as on traditional desktops.&lt;/p&gt;

&lt;p&gt;As this was a developer-driven company many developers came up with
solutions on how to reach that goal.  These developers showing off their
ideas meant we had lots of awesome projects to chose from. The projects can
roughly be split into 2 sides.   The &quot;optimization&quot; side which easily
fixes a hundred little speed problems . And a &quot;Big-Changes&quot; side.  These are
projects that require much more time because they change some fundamental
ideas, but they also have a lot larger return on investment.&lt;/p&gt;

&lt;p&gt;I would argue that Bitcoin is in the same position now.  We &lt;em&gt;have&lt;/em&gt; to get
better and we have to scale Bitcoin for many more expected users coming
in over the next years.&lt;/p&gt;

&lt;p&gt;My experience with this process in Trolltech was that all the small,
low-risk changes to make it faster were a huge success. They were needed,
and they made a huge difference.&lt;/p&gt;

&lt;p&gt;On the other hand, the larger &quot;Big-Changes&quot; inevitably introduced more risk and
they forced people using our software to change their behavior to actually
use the new concepts and ideas.
For those reasons their effort ended up taking several years to bear fruit.&lt;/p&gt;

&lt;p&gt;In the end both groups pulled it off, and the results are in
my personal opinion simply unique and amazing.&lt;/p&gt;

&lt;p&gt;Some lessons I learned from those projects at Trolltech are;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;we need researchers to do what they do best. Come up with strange and
exciting ways to do things better.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;we also need people doing the boring, &quot;optimization&quot; work, making
networking protocols work faster and more reliably as a simple example.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This conference presents various &quot;optimization-level&quot; changes that will make
Bitcoin scale much better than it does now. With very little pain, and from
experience I expect quite a big gain.
We call this &lt;em&gt;on-chain&lt;/em&gt; scaling, because whatever your belief is on
which path leads to Bitcoins success, if we want to scale, we need on-chain
transactions to scale beyond the current 3 transactions per second.&lt;/p&gt;

&lt;p&gt;For the next years some changes are being prepared which
by the nature of them being fundamental changes
in the way that Bitcoin will end up being used, will take much longer to create and rollout.  I&#39;ve
seen plans like Segregated Witness and the Lightning Network, interesting
ideas, for sure.  Various teams are working on that and I wish them all the
luck. It is already clear that we can&#39;t expect those scaling solutions to have
any reasonable impact without on-chain scaling solutions being rolled out
as well.&lt;/p&gt;

&lt;p&gt;This makes sense off-course, when you think about it, you need the
foundation to be strong when building on top of it.&lt;/p&gt;

&lt;h2&gt;Bitcoin, in a nutshell&lt;/h2&gt;

&lt;p&gt;Now, enough with the high level talk, lets see some actual ideas.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://zander.github.io//tags/Mining/../../images/presentation-onchain1.gif&quot;&gt;&lt;img src=&quot;http://zander.github.io//tags/Mining/../../images/presentation-onchain1.gif&quot; width=&quot;400&quot; height=&quot;224&quot; class=&quot;img&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the idea of Bitcoin.
We have a single computer that receives transactions and groups them all in
its memory pool.  What it does at the same time is Bitcoin checks each of
those transactions for validity and after some time those transactions are
combined into a block.&lt;/p&gt;

&lt;p&gt;Every single transaction entering this Bitcoin computer is checked that the
transaction is a legal one.  For instance, a payment from person A to
person B can only be created by person A. We use cryptographic proof to
check that the person initiating the transaction is actually the owner of
the coins he or she he sending.&lt;/p&gt;

&lt;p&gt;Bitcoin also checks that people don&#39;t try to send the digital coins to two
people at the same time.  The Bitcoin application holds all transactions in
storage and if one comes in that tries to spend already spent money, it is
simply rejected.&lt;/p&gt;

&lt;p&gt;When a block comes in it makes the transactions contained in that block
permanent and Bitcoin will merge that block into its database.
The transactions it had in memory are now removed if they were already in
the block, or no longer valid because of other transactions in the block.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://zander.github.io//tags/Mining/../../images/presentation-onchain2.gif&quot;&gt;&lt;img src=&quot;http://zander.github.io//tags/Mining/../../images/presentation-onchain2.gif&quot; width=&quot;400&quot; height=&quot;224&quot; class=&quot;img&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bitcoin is essentially fully operational with just one node, but it works
with duplication of its functionality over different nodes. Here on screen
are 5 nodes.&lt;/p&gt;

&lt;p&gt;When a transaction comes in, the node validates it and if its valid the node
will forward it to all its neighbors. Which do the same and forward it to
their neighbors.  In less than 1 second 50% of the network will have the
transaction, in less than 4s practically all of them will have it.&lt;/p&gt;

&lt;p&gt;These nodes are in many respects exact duplicates, so technically there is
little reason to have more than one node, except maybe failover.
Politically this duplication means we avoid centralized decision making. We
avoid one operator being able to tell the rest of the world what Bitcoin
will look like today. This is assuming we make the system work fast enough.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://zander.github.io//tags/Mining/../../images/presentation-onchain3.gif&quot;&gt;&lt;img src=&quot;http://zander.github.io//tags/Mining/../../images/presentation-onchain3.gif&quot; width=&quot;400&quot; height=&quot;224&quot; class=&quot;img&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Blocks, the big collections of transactions, get copied between nodes as
well. The propagation path is similar to transactions.  Currently we send
blocks as a complete chunk of data in one go. This is then validated by a
node to follow the Bitcoin rules and forwarded to its neighbors.&lt;/p&gt;

&lt;p&gt;A healthy network has a large number of Bitcoin nodes to ensure operation
and to allow some of them to be removed without harming Bitcoin as a
whole. Damage to any part of the network will just get routed around.&lt;/p&gt;

&lt;p&gt;Naturally, with a large number of nodes, how they are networked together
becomes more important and that networking layer itself becomes a source of
failure.&lt;/p&gt;

&lt;p&gt;What I&#39;ve skipped over so far is where the blocks come from. A block is
created by a miner.
See, here is one in the bottom left corner.&lt;/p&gt;

&lt;p&gt;It creates a block and sends it over the network.
Each node turning blue means they received the data.&lt;/p&gt;

&lt;p&gt;Now, because a block is actually a substantial amount of
data, it will take longer than the one second that a single transaction
took.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://zander.github.io//tags/Mining/../../images/presentation-onchain4.gif&quot;&gt;&lt;img src=&quot;http://zander.github.io//tags/Mining/../../images/presentation-onchain4.gif&quot; width=&quot;400&quot; height=&quot;224&quot; class=&quot;img&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bitcoinstats.com reports between 10 seconds and a minute to propagate a 1MB
block to practically the whole network.&lt;/p&gt;

&lt;p&gt;If we start making bigger blocks, this time will go up. More data means slower
propagation times.&lt;/p&gt;

&lt;p&gt;As the mining difficulty is adjusted every 2 weeks to  make sure that the
time between blocks stays on average 10 minutes, the time it takes to send
an entire block is not a big deal for end users. As long as they can
download blocks faster than they get created, things will continue working.
Not optimally, but it works.&lt;/p&gt;

&lt;p&gt;There are many people using Bitcoin that have higher requirements than
that, though, and the
current way that Bitcoin works leaves a lot of space for improvement.&lt;/p&gt;

&lt;h2&gt;How does this work for miners?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://zander.github.io//tags/Mining/../../images/presentation-onchain5.png&quot;&gt;&lt;img src=&quot;http://zander.github.io//tags/Mining/../../posts/Innovation - OnlineScaling/400x325-presentation-onchain5.png&quot; width=&quot;400&quot; height=&quot;325&quot; class=&quot;float-right&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I&#39;m currently focussing on miners. How to make sure that miners get the
best out of the system. To explain what I&#39;m working on I will first show
what happens with miners using the Bitcoin software.&lt;/p&gt;

&lt;p&gt;I&#39;m going to draw the time as shown from the perspective of two miners. One
at the top of the screen, and another miner in another physical location at
the bottom of the screen.&lt;/p&gt;

&lt;p&gt;Two miners are mining and one finds a nonce that makes his block valid.
So this miner is happy, he just made several thousands of dollars worth of
money. At least, as long as he can convince the rest of the world to use
this block he just completed to build on top off for following Bitcoin
blocks.  This implies his block is seen by the rest of the network before
any competitors block have finished their block.&lt;/p&gt;

&lt;p&gt;To do so, he sends this block over the network to another miner.
The mean propagation time measured by Peter Rizun for blocks between 900kb
and 1MB shows about 4 seconds, but as soon as you hop over the great
firewall of China this rises to a mean of 17.4 seconds.  I&#39;ll use the
real-time example of 10 seconds here mostly because I don&#39;t talk so fast
anyway.&lt;/p&gt;

&lt;p&gt;Now, after the miner on the bottom received the block, he will be able to
start mining on top of that.&lt;/p&gt;

&lt;p&gt;What you may notice is that the miner on the bottom is essentially doing
work for about 10 seconds that is useless. He was still competing in the
competition for block 1 while that race has already been won by another.
He just didn&#39;t know that yet.&lt;/p&gt;

&lt;p&gt;Lets take a look at my proposal using &quot;Optimistic mining&quot;, which tries to
fix this specific little issue.&lt;/p&gt;

&lt;p&gt;Same situation, one miner finds a block.  Here is a difference. I split up the block into two parts, one is teeny
tiny and send over the network in close to the speed of light and the other
is the actual block, unchanged from before.&lt;/p&gt;

&lt;p&gt;While the entire block is being sent, the miner at the bottom is now all of a
sudden able to mine on top of this new block. Therefore no longer losing money
doing work that is useless.
Because the full block with all the transactions hasn&#39;t arrived yet he
can&#39;t know which transactions were included in it, and thus which
transactions he can safely include in his block. The solution to this is
for his block to be empty.&lt;/p&gt;

&lt;p&gt;The miner switches to mining a full block as soon as he received the whole
block with transactions and is able to decide which transactions to
include in his block.&lt;/p&gt;

&lt;p&gt;The 10 seconds highlighted here is the propagation time of a full block.
This time can be influenced by many things. Bigger blocks can make it take
longer. Network attacks may make it essential to ask the original miner for
more details, slowing down the propagation time. And most importantly, as
we currently see with the great-firewall of china, some countries may just
not have such a great connection to the rest of the world.  I don&#39;t think
its a good idea that a miner in Australia loses money just because he has a
slower connection to the rest of the world.&lt;/p&gt;

&lt;p&gt;Optimistic mining means a miner is made immune to any propagation delays of
the transactions in a block. This only can mean good things to avoid
centralization of mining power.&lt;/p&gt;

&lt;p&gt;In my designs the teeny-tiny part of the block a miner sends out as soon as
he finds a block will be just a block header making it approximately 100 bytes.
A node can validate this with a cheap check and then forward it.&lt;/p&gt;

&lt;p&gt;Two details are important here; the data is forwarded by any node to
its peers and thats it.  There is no more network traffic that a peer
generates based on this.  It is just a way to broadcast a new piece of data
as fast as possible, as far as possible.&lt;/p&gt;

&lt;p&gt;As I promised, these changes are mostly boring and really not
noble price worthy. I still get excited from changes that have a
substantial benefit, though. But I&#39;m just that kind of geek.
These changes do help a lot when you add many of them together and
end up with a massively better scaling system than what we have today.&lt;/p&gt;

&lt;h2&gt;What to work on next&lt;/h2&gt;

&lt;p&gt;If we look at what it means to scale Bitcoin today we look at all the
obvious resources that any computer program needs. Most of them are really
not an issue. For instance it would take 75 years to fill up a mainstream
harddrive of 3TB with todays block size.  People run the client on a
raspberry Pi. And it copes just fine.&lt;/p&gt;

&lt;p&gt;In Bitcoin the biggest scaling issue we have today is the inefficient use
of bandwidth and the poor peer to peer network.  This is demonstrated best
by the usage of a centralized relay system which operates outside of the
Bitcoin network that miners use to send blocks to each other as fast as possible.
As long as those centralizes systems are needed we will have a permissioned
system where a new player needs permission to enter.  New player that don&#39;t
get permission to use the relay system that all the other miners are on,
will not be able to compete.
We don&#39;t want a system where the relay operators get to decide what miners
can and can not do, under threat of losing their access and subsequently
their business.&lt;/p&gt;

&lt;p&gt;In Bitcoin we currently have what I&#39;d label a first generation p2p network.
Think about a system that students typically set up in class during
computer science as a play thing. Its making all the traditional mistakes.&lt;/p&gt;

&lt;h2&gt;Further research&lt;/h2&gt;

&lt;p&gt;The Bitcoin network uses unlabeled binary blobs to send over the wire. This
implies that developers can never fix a message because old clients would
not understand it and likely fail spectacularly.  Tagged formats, the most
well known of which is JSON, solved this many years ago.
What we need is like HTML where an old browser can still read the
newest format without giving errors. It just ignores the parts it doesn&#39;t
know.&lt;/p&gt;

&lt;p&gt;When I worked for a financial company sending out half a million stock-price
quotes every second, I learned a lot about how to do a binary protocol
properly.
I&#39;ve done some extended testing already with a new on-the-wire protocol that
has looks like its saving on bandwidth and speed quite substantially.
But the real benefit is that it can be extended because the fields are
labeled much like JSON or XML do. Its values are also strongly typed and
extensible.  What that means is that the protocol itself includes the
information that says a value is an int, a bool or a string.&lt;/p&gt;

&lt;p&gt;Making such a chance would be very beneficial to make the protocol more
maintainable by allowing bugfixes to be made that are backwards compatible
in a clean manner.&lt;/p&gt;

&lt;p&gt;Another issue we have with our peer to peer system is based on how an
individual node finds other nodes to connect to. We have some code
that decides based on the IP-address numbers whom to connect to.
The logic seems to be
that an IP address is a good indication for location, so it searches to
connect to many different locations.
Unfortunately, this is overstating the correlation between addresses and
distance so this is only slightly better than pure randomly choosing whom to
connect to.&lt;/p&gt;

&lt;p&gt;Why is this important? Lets take an example of 2000 nodes, all around the world that
want to get a message as fast as possible to all of those nodes,
my thinking is that we each node should measure the distance to another
node by seeing how long it takes to send a message and the message to come
back to us.&lt;/p&gt;

&lt;p&gt;We can then order the
sending of the messages so longer distance messages are send first and
shorter distance messages are send later.&lt;/p&gt;

&lt;p&gt;Think about it like this, you could send a message by courier to the next
village and he sends it to the next and so on.
Or you send a courier by plane to the next big city and he starts sending
couriers out from there.
The idea is that a message would get to the the other side of the globe in
5 hops instead of 50.&lt;/p&gt;

&lt;p&gt;To be fair, there are really not a lot of systems out there that create a
peer to peer system of this scale that have no central server and have to
send messages through the entire system as fast as possible. But this lack of
competition just means its going to be a nice challenge to find what works
and what doesn&#39;t.&lt;/p&gt;

&lt;h2&gt;Some other details&lt;/h2&gt;

&lt;p&gt;We have some work done that fixes the problem that while downloading and
validating a block that node can&#39;t relay transactions.&lt;/p&gt;

&lt;p&gt;For our protocol to get to a more professional level we&#39;d also need message
priority. A node pushing something to the top of the message-queue to be sent.&lt;/p&gt;

&lt;p&gt;We&#39;d likely want to support both TCP and UDP queues where UDP is used for
higher-priority but smaller messages.  That would be ideal for the
optimistic mining teeny-tiny block message we want to go around the world in
near lightspeed.&lt;/p&gt;

&lt;p&gt;And last we&#39;d &lt;em&gt;really&lt;/em&gt; need to set a maximum size for a single message. The
telco&#39;s switched to packet switching in the 90s, we&#39;re long overdue.
We now send a single message of one or many megabytes, experience shows that
splitting that up into multiple messages or maybe 50kb, and re-assembling it on the other
side will have a very positive effect on throughput because you can
send bigger data to two peers at the same time, using only twice the wall-time in optimal situations.
But when you are sending a large block to a peer
that is very slow in receiving it, this message chunk-ING will stop slowing
down your sending speed to another peer at the same time.&lt;/p&gt;

&lt;p&gt;I&#39;ve implemented this in another system where the overhead per 50KB message ended
up being only 14 bytes. So I really don&#39;t see any reason to not do this.&lt;/p&gt;

&lt;p&gt;These are useful changes that I&#39;m hoping to see being worked on, if not by
me, then someone else.&lt;/p&gt;

&lt;p&gt;Other issues we will bump into as we get bigger blocks and higher
throughput are going to be found, and fixed as we move forward. I have no
doubt about that. That is the nature of this game, there is always some
optimization that we haven&#39;t done yet.&lt;/p&gt;

&lt;p&gt;Beyond the network layer are a lot of other things that show up as being
useful to work on in order to allow more data to go through Bitcoin cheaper
and faster. Its still young software and I don&#39;t think its been bothered
with profilers or other speed measurements very often. Gavin started a
benchmark suite that never really saw uptake by any of the other
developers. So please expect a huge amount of benefits to happen in the
next years alone for throughput as its easy pickings for optimizations when
its not been done for years.&lt;/p&gt;

&lt;p&gt;I would say that within a year the network would be safely able to handle
between 20 and 50 MB blocks.&lt;/p&gt;

&lt;p&gt;Creating a Bitcoin that, on-chain, can grow and support more users will be
the thing that actually creates more value for the Bitcoin ecosystem.
So while our opponents are discussing how to distribute the money of the
rich differently, until they inevitably run out of money, we are working to
actually create new value to increase your wealth as well as ours.&lt;/p&gt;

&lt;p&gt;Bitcoin has a bright future.&lt;/p&gt;
</description>


</item>
<item>
	<title>On Mining and Wallets</title>

	<guid isPermaLink="false">http://zander.github.io//posts/On%20Mining%20and%20Wallets/</guid>

	<link>http://zander.github.io//posts/On%20Mining%20and%20Wallets/</link>



	<category>Bitcoin</category>

	<category>Mining</category>


	<pubDate>Mon, 27 Jun 2016 11:31:01 +0000</pubDate>
	<dcterms:modified>2016-06-27T11:31:01Z</dcterms:modified>


	<description>&lt;h3&gt;Don&#39;t leave your money on the street.&lt;/h3&gt;

&lt;p&gt;Bitcoind is labelled as the backend of the network. When I explain this to
friends I explain it like its the router that you have stuffed behind the
sofa or if you are more professional, in a server room, sometimes not even
in the same country you are in.
Either way, it is something needed for everything else to work. But mostly
ignored.&lt;/p&gt;

&lt;p&gt;This is how I imagine the users of Bitcoin Classic to use the software, and
it is the way I think it should be. They use it as something that just
works to make it possible for them to keep their business or infrastructure
running.&lt;/p&gt;

&lt;p&gt;One such group of Bitcoin Classic users are the miners, they run
bitcoin-classic to have an accurate view of the state of the network.  The
new transactions are collected in Bitcoin Classic and it creates new block
templates for them. In short; Bitcoin Classic helps miners connect to the
network.&lt;/p&gt;

&lt;p&gt;What is totally out-of-character with the design that Bitcoin has had for
years is that, when the miner actually mines the block that the
block-reward is &quot;stored&quot; in the Bitcoin node.&lt;/p&gt;

&lt;p&gt;This means that your Bitcoin Classic suddenly isn&#39;t just a piece of network
infrastructure anymore.  It holds thousands of dollars worth of value. And
because of that you&#39;d have to protect it.  Which is not always compatible
with the way that you want to use a piece of network infrastructure.&lt;/p&gt;

&lt;p&gt;See, the original Bitcoin node that Satoshi made was a reference client and
it included the ability to relay messages, it has a wallet and it knows how
to mine blocks.&lt;/p&gt;

&lt;p&gt;Over the years we stopped using the mining software because other software
and hardware solutions have appeared that were much better.&lt;/p&gt;

&lt;p&gt;We have also seen many better wallets which are much more used than a full
node based wallet.&lt;/p&gt;

&lt;p&gt;All of those still use the bitcoin full node software, like Bitcoin
Classic, as a platform to build on.  They communicate via various channels
with the Bitcoin software which in turn connects them to the Bitcoin
Network.&lt;/p&gt;

&lt;p&gt;It is in my opinion time to separate Bitcoin Mining from the Bitcoin
Wallet. We should no longer force Miners to use the Bitcoin wallet that is
shipped in Bitcoin Classic. We should no longer force the horrible security
practice of storing bitcoin private keys (and the money they represent) on
a piece of equipment that really is meant to be like a router or a hub
connecting your business to the Bitcoin network.&lt;/p&gt;

&lt;h3&gt;Stop demanding a wallet in a mining node&lt;/h3&gt;

&lt;p&gt;In Bitcoin Classic&#39;s development branch we have changed the
system to allow mining on a node that does not have a wallet compiled in.&lt;/p&gt;

&lt;p&gt;I introduced a new RPC command called &lt;code&gt;createaddress&lt;/code&gt;, which returns
something like this;&lt;/p&gt;

&lt;pre&gt;
{
  &quot;address&quot;: &quot;1E852VpivAYpZcwGo5bNB9U4twjnJfrL2c&quot;,
  &quot;pubkey&quot;:
&quot;0303a60a215af3ea3240705db3201b5161445e1bdbd1e4e942284cfd9e9ede0ea1&quot;,
  &quot;private&quot;: &quot;KyjwYTJrhAS14fV7fP16Z9bhiudpPcSTT5HpPgpoampS57zgT59w&quot;
}
&lt;/pre&gt;


&lt;p&gt;The private key is the one piece of information needed to later spent the
money that would be stored on the address. To benefit from this change the
miner would store this private key in a secure location.&lt;/p&gt;

&lt;p&gt;The pubkey and the address are not needed to be stored securely, they
can be used in future mined blocks.  When a block is mined with the pubkey
set, the money can later be redeemed using the safely stored private key.&lt;/p&gt;

&lt;p&gt;A second new RPC command is &lt;code&gt;setcoinbase&lt;/code&gt;.  When called with the &#39;pubkey&#39;
field from above this will cause any following calls to
&lt;code&gt;getblocktemplate&lt;/code&gt; to be generated so when it is mined all the fees and
block reward will go to the address.&lt;/p&gt;

&lt;p&gt;People can use the output of &lt;code&gt;createaddress&lt;/code&gt;, &lt;strong&gt;or if they don&#39;t like
change, just use the existing &lt;code&gt;getnewaddress&lt;/code&gt; and &lt;code&gt;validateaddress&lt;/code&gt; rpc
calls to create a coinbase that will end up in your bitcoind wallet&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Additionally the command-line option &lt;code&gt;--gencoinbase&lt;/code&gt; is added to bitcoind
which has the same effect as the setcoinbase RPC command and that may be
useful to use until the mining software is upgraded to use these new RPC
commands. Because calling getblocktemplate without setting the coinbase
will now cause an error to be returned.&lt;/p&gt;

&lt;p&gt;This change is still only available on the development branch, and has not
been scheduled for release just yet.  So &lt;strong&gt;there is still time to give
feedback on what you like or dislike or would like to change&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In my opinion these changes will have the positive effect that miners can
now feel much more safe when their bitcoind connects them to the bitcoin
network, without needing all the security that a full wallet should have.&lt;/p&gt;
</description>


</item>

</channel>
</rss>
